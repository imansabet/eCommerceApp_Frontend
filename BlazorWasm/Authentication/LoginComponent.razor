@page "/authentication/login"


<div class="container-fluid m-5 p-5">
    <div class="row">
        <div class="col-lg-4 offset-4">
            <EditForm Model="Login" Enhance OnValidSubmit="LoginUser" >
                <DataAnnotationsValidator/>
                @if(!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-@AlertType"> @Message </div>
                }
                <div class="card p-4">
                    <div class="card-header">Login</div>
                    <div class="card-body">
                        <div class="form-group">
                            <FloatingText 
                                @bind-Value="Login.Email" Placeholder="Add Email"
                                          class="form-control" 
                                Label="Enail Address" />
                            <ValidationMessage For="()=>Login.Email" />
                        </div>
                        <div class="form-group">
                            <FloatingText @bind-Value="Login.Password" Placeholder="Enter Your Password"
                                          class="form-control"
                                          Label="Password" />
                            <ValidationMessage For="()=>Login.Password" />
                        </div>
                    </div>
                    <button class="btn btn-primary" type="submit"> Login </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>



@code {
    string AlertType = string.Empty;
    string Message = string.Empty;

    public LoginUser Login { get; set; } = new();
    async Task LoginUser()
    {
        Message = string.Empty;
        AlertType = string.Empty;
        var result = await authenticationService.LoginUser(Login);
        if(!result.Success)
        {
            Message = result.Message;
            AlertType = "danger";
            return;
        }
        string cookieValue = tokenService.FormToken(result.Token, result.RefreshToken);
        await tokenService.SetCookie
        (
            Constant.Cookie.Name,
            cookieValue,
            Constant.Cookie.Days,
            Constant.Cookie.Path
        );

        (authStateProvider as CustomAuthStateProvider)!.NotifyAuthenticationState();
        NavManager.NavigateTo("/", true);


    }

}
